#!/usr/bin/env python3
"""
Jarvis Project Template System
Quickly scaffold new projects with pre-configured AI agent assignments.
"""

import os
import json
import shutil
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Optional
from rich.console import Console
from rich.prompt import Prompt, Confirm
from rich.table import Table
from rich.panel import Panel

console = Console()


class ProjectTemplate:
    """Base class for project templates."""
    
    def __init__(self, name: str, description: str, type: str):
        self.name = name
        self.description = description
        self.type = type
        self.agents = []
        self.initial_tasks = []
        self.structure = {}
        
    def create(self, project_path: Path, config: Dict) -> bool:
        """Create project from template."""
        try:
            # Create project directory
            project_path.mkdir(parents=True, exist_ok=True)
            
            # Create project.json
            project_config = {
                "id": f"project-{int(datetime.now().timestamp())}",
                "name": config.get('name', self.name),
                "type": self.type,
                "description": config.get('description', self.description),
                "created": datetime.now().isoformat(),
                "status": "active",
                "agents": self.agents,
                "tasks": self.initial_tasks,
                "config": config
            }
            
            with open(project_path / 'project.json', 'w') as f:
                json.dump(project_config, f, indent=2)
            
            # Create directory structure
            self._create_structure(project_path)
            
            # Create README
            self._create_readme(project_path, config)
            
            # Create initial files
            self._create_initial_files(project_path, config)
            
            return True
            
        except Exception as e:
            console.print(f"[red]Error creating project: {e}[/red]")
            return False
    
    def _create_structure(self, project_path: Path):
        """Create directory structure."""
        for dir_path in self.structure.get('directories', []):
            (project_path / dir_path).mkdir(parents=True, exist_ok=True)
    
    def _create_readme(self, project_path: Path, config: Dict):
        """Create README file."""
        readme_content = f"""# {config.get('name', self.name)}

## Description
{config.get('description', self.description)}

## Project Type
{self.type.replace('_', ' ').title()}

## Assigned Agents
{chr(10).join(f"- {agent}" for agent in self.agents)}

## Getting Started
1. Review the initial tasks in the Jarvis dashboard
2. Agents will begin working on the project automatically
3. Monitor progress at http://localhost:3000

## Project Structure
```
{self._get_structure_tree()}
```

## AI Agent Responsibilities
{self._get_agent_responsibilities()}

---
Generated by Jarvis Super Agent System
"""
        
        with open(project_path / 'README.md', 'w') as f:
            f.write(readme_content)
    
    def _get_structure_tree(self) -> str:
        """Get directory structure as tree."""
        lines = []
        for dir_path in sorted(self.structure.get('directories', [])):
            depth = len(Path(dir_path).parts)
            indent = "  " * (depth - 1)
            name = Path(dir_path).name
            lines.append(f"{indent}├── {name}/")
        return '\n'.join(lines) if lines else "."
    
    def _get_agent_responsibilities(self) -> str:
        """Get agent responsibilities description."""
        responsibilities = {
            "agent-orchestrator-001": "Coordinates tasks and manages workflow",
            "agent-architect-001": "Designs system architecture and structure",
            "agent-researcher-001": "Researches best practices and solutions",
            "agent-quality-001": "Ensures code quality and testing",
            "agent-communicator-001": "Documents progress and reports status"
        }
        
        lines = []
        for agent in self.agents:
            resp = responsibilities.get(agent, "General support")
            lines.append(f"- **{agent}**: {resp}")
        
        return '\n'.join(lines)
    
    def _create_initial_files(self, project_path: Path, config: Dict):
        """Create initial files based on template."""
        pass  # Override in subclasses


class WebAppTemplate(ProjectTemplate):
    """Template for web applications."""
    
    def __init__(self):
        super().__init__(
            name="Web Application",
            description="Full-stack web application with modern architecture",
            type="web_app"
        )
        
        self.agents = [
            "agent-orchestrator-001",
            "agent-architect-001",
            "agent-researcher-001",
            "agent-quality-001"
        ]
        
        self.initial_tasks = [
            {
                "id": "task-001",
                "description": "Design application architecture",
                "assigned_to": "agent-architect-001",
                "status": "pending"
            },
            {
                "id": "task-002",
                "description": "Set up project structure and dependencies",
                "assigned_to": "agent-orchestrator-001",
                "status": "pending"
            },
            {
                "id": "task-003",
                "description": "Research best practices for the tech stack",
                "assigned_to": "agent-researcher-001",
                "status": "pending"
            }
        ]
        
        self.structure = {
            "directories": [
                "frontend/src/components",
                "frontend/src/pages",
                "frontend/src/utils",
                "frontend/public",
                "backend/src/routes",
                "backend/src/models",
                "backend/src/services",
                "backend/tests",
                "docs",
                "scripts"
            ]
        }
    
    def _create_initial_files(self, project_path: Path, config: Dict):
        """Create initial web app files."""
        # Frontend package.json
        frontend_package = {
            "name": f"{config.get('name', 'webapp').lower().replace(' ', '-')}-frontend",
            "version": "0.1.0",
            "private": True,
            "scripts": {
                "dev": "vite",
                "build": "vite build",
                "preview": "vite preview"
            },
            "dependencies": {},
            "devDependencies": {}
        }
        
        with open(project_path / 'frontend' / 'package.json', 'w') as f:
            json.dump(frontend_package, f, indent=2)
        
        # Backend package.json
        backend_package = {
            "name": f"{config.get('name', 'webapp').lower().replace(' ', '-')}-backend",
            "version": "0.1.0",
            "private": True,
            "scripts": {
                "dev": "nodemon src/index.js",
                "start": "node src/index.js",
                "test": "jest"
            },
            "dependencies": {},
            "devDependencies": {}
        }
        
        with open(project_path / 'backend' / 'package.json', 'w') as f:
            json.dump(backend_package, f, indent=2)
        
        # Docker compose
        docker_compose = """version: '3.8'

services:
  frontend:
    build: ./frontend
    ports:
      - "3001:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8001
    depends_on:
      - backend

  backend:
    build: ./backend
    ports:
      - "8001:8000"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://user:pass@db:5432/appdb
    depends_on:
      - db

  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=pass
      - POSTGRES_DB=appdb
    volumes:
      - postgres-data:/var/lib/postgresql/data

volumes:
  postgres-data:
"""
        
        with open(project_path / 'docker-compose.yml', 'w') as f:
            f.write(docker_compose)


class APITemplate(ProjectTemplate):
    """Template for REST APIs."""
    
    def __init__(self):
        super().__init__(
            name="REST API",
            description="RESTful API with authentication and documentation",
            type="api"
        )
        
        self.agents = [
            "agent-orchestrator-001",
            "agent-architect-001",
            "agent-quality-001"
        ]
        
        self.initial_tasks = [
            {
                "id": "task-001",
                "description": "Design API endpoints and data models",
                "assigned_to": "agent-architect-001",
                "status": "pending"
            },
            {
                "id": "task-002",
                "description": "Implement authentication system",
                "assigned_to": "agent-orchestrator-001",
                "status": "pending"
            },
            {
                "id": "task-003",
                "description": "Set up testing framework",
                "assigned_to": "agent-quality-001",
                "status": "pending"
            }
        ]
        
        self.structure = {
            "directories": [
                "src/controllers",
                "src/models",
                "src/middleware",
                "src/routes",
                "src/services",
                "src/utils",
                "tests/unit",
                "tests/integration",
                "docs",
                "config"
            ]
        }


class DataAnalysisTemplate(ProjectTemplate):
    """Template for data analysis projects."""
    
    def __init__(self):
        super().__init__(
            name="Data Analysis",
            description="Data analysis project with ML capabilities",
            type="data_analysis"
        )
        
        self.agents = [
            "agent-orchestrator-001",
            "agent-researcher-001",
            "agent-quality-001"
        ]
        
        self.initial_tasks = [
            {
                "id": "task-001",
                "description": "Analyze data requirements and sources",
                "assigned_to": "agent-researcher-001",
                "status": "pending"
            },
            {
                "id": "task-002",
                "description": "Set up data pipeline",
                "assigned_to": "agent-orchestrator-001",
                "status": "pending"
            },
            {
                "id": "task-003",
                "description": "Create initial analysis notebooks",
                "assigned_to": "agent-researcher-001",
                "status": "pending"
            }
        ]
        
        self.structure = {
            "directories": [
                "data/raw",
                "data/processed",
                "data/external",
                "notebooks",
                "src/data",
                "src/features",
                "src/models",
                "src/visualization",
                "reports/figures",
                "models"
            ]
        }


class AutomationTemplate(ProjectTemplate):
    """Template for automation projects."""
    
    def __init__(self):
        super().__init__(
            name="Automation",
            description="Automation and workflow orchestration project",
            type="automation"
        )
        
        self.agents = [
            "agent-orchestrator-001",
            "agent-architect-001"
        ]
        
        self.initial_tasks = [
            {
                "id": "task-001",
                "description": "Define automation workflows",
                "assigned_to": "agent-architect-001",
                "status": "pending"
            },
            {
                "id": "task-002",
                "description": "Set up scheduling system",
                "assigned_to": "agent-orchestrator-001",
                "status": "pending"
            }
        ]
        
        self.structure = {
            "directories": [
                "workflows",
                "scripts",
                "config",
                "logs",
                "tests"
            ]
        }


class ProjectTemplateManager:
    """Manages project templates."""
    
    def __init__(self):
        self.templates = {
            'web_app': WebAppTemplate(),
            'api': APITemplate(),
            'data_analysis': DataAnalysisTemplate(),
            'automation': AutomationTemplate()
        }
    
    def list_templates(self):
        """Display available templates."""
        table = Table(title="Available Project Templates")
        table.add_column("Type", style="cyan")
        table.add_column("Description")
        table.add_column("Agents", style="green")
        
        for key, template in self.templates.items():
            table.add_row(
                key,
                template.description,
                str(len(template.agents))
            )
        
        console.print(table)
    
    def create_project(self, template_type: Optional[str] = None) -> Optional[Path]:
        """Create a new project from template."""
        # Show templates if not specified
        if not template_type:
            self.list_templates()
            template_type = Prompt.ask(
                "\nSelect template type",
                choices=list(self.templates.keys())
            )
        
        template = self.templates.get(template_type)
        if not template:
            console.print(f"[red]Unknown template: {template_type}[/red]")
            return None
        
        # Get project details
        console.print(f"\n[bold]Creating {template.name} Project[/bold]")
        
        config = {
            'name': Prompt.ask("Project name", default=f"My {template.name}"),
            'description': Prompt.ask("Project description", default=template.description)
        }
        
        # Additional configuration based on template
        if template_type == 'web_app':
            config['framework'] = Prompt.ask(
                "Frontend framework",
                choices=['react', 'vue', 'angular', 'svelte'],
                default='react'
            )
            config['backend'] = Prompt.ask(
                "Backend framework",
                choices=['express', 'fastapi', 'django', 'rails'],
                default='express'
            )
        
        elif template_type == 'api':
            config['framework'] = Prompt.ask(
                "API framework",
                choices=['express', 'fastapi', 'flask', 'nest'],
                default='fastapi'
            )
            config['database'] = Prompt.ask(
                "Database",
                choices=['postgresql', 'mysql', 'mongodb', 'sqlite'],
                default='postgresql'
            )
        
        # Create project
        project_name = config['name'].lower().replace(' ', '_')
        project_path = Path('projects') / project_name
        
        if project_path.exists():
            if not Confirm.ask(f"\nProject {project_name} already exists. Overwrite?"):
                return None
            shutil.rmtree(project_path)
        
        console.print(f"\n[yellow]Creating project at: {project_path}[/yellow]")
        
        if template.create(project_path, config):
            console.print(Panel(
                f"[bold green]✨ Project created successfully![/bold green]\n\n"
                f"Location: {project_path}\n"
                f"Agents assigned: {len(template.agents)}\n"
                f"Initial tasks: {len(template.initial_tasks)}\n\n"
                f"Next steps:\n"
                f"1. Open the dashboard: http://localhost:3000\n"
                f"2. Navigate to Projects → {config['name']}\n"
                f"3. Watch the agents start working!",
                title="🎉 Success",
                border_style="green"
            ))
            
            return project_path
        
        return None
    
    def create_from_existing(self, source_path: Path) -> Optional[Path]:
        """Create template from existing project."""
        # Analyze existing project
        console.print(f"\n[yellow]Analyzing project at: {source_path}[/yellow]")
        
        # TO DO: Implement project analysis and template creation
        console.print("[dim]Feature coming soon: Create custom templates from existing projects[/dim]")
        
        return None


def main():
    """CLI for project templates."""
    import argparse
    
    parser = argparse.ArgumentParser(description="Jarvis Project Template System")
    parser.add_argument('command', choices=['create', 'list', 'from-existing'], 
                       help="Command to execute")
    parser.add_argument('--type', help="Template type for create command")
    parser.add_argument('--source', help="Source path for from-existing command")
    
    args = parser.parse_args()
    
    manager = ProjectTemplateManager()
    
    if args.command == 'list':
        manager.list_templates()
    
    elif args.command == 'create':
        project_path = manager.create_project(args.type)
        if project_path:
            console.print(f"\n[green]Project created at: {project_path}[/green]")
    
    elif args.command == 'from-existing':
        if not args.source:
            console.print("[red]--source required for from-existing command[/red]")
            return
        
        source_path = Path(args.source)
        if not source_path.exists():
            console.print(f"[red]Source path not found: {source_path}[/red]")
            return
        
        manager.create_from_existing(source_path)


if __name__ == "__main__":
    main()